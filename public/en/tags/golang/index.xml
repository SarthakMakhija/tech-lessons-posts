<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on tech-lessons.in</title>
    <link>//localhost:1313/en/tags/golang/</link>
    <description>Recent content in Golang on tech-lessons.in</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 22 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/en/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Many flavors of Networking IO</title>
      <link>//localhost:1313/en/blog/many_flavors_of_networking_io/</link>
      <pubDate>Wed, 22 May 2024 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/many_flavors_of_networking_io/</guid>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;The foundation of any networked application hinges on its ability to efficiently handle data exchange.&#xA;But beneath the surface, there&amp;rsquo;s a hidden world of techniques for managing this communication.&#xA;This article dives into various &amp;ldquo;flavors&amp;rdquo; of networking IO, exploring the trade-offs associated with each approach.&lt;/p&gt;&#xA;&lt;p&gt;To illustrate various ways applications handle network traffic, we&amp;rsquo;ll build a TCP server using four distinct approaches:&#xA;&lt;strong&gt;blocking I/O with a single thread&lt;/strong&gt;, &lt;strong&gt;blocking I/O with multiple threads&lt;/strong&gt;, &lt;strong&gt;non-blocking I/O with busy waiting&lt;/strong&gt;, and&#xA;&lt;strong&gt;a single-threaded event loop&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cache-Line Hash Table</title>
      <link>//localhost:1313/en/blog/cache_line_hash_table/</link>
      <pubDate>Fri, 19 Apr 2024 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/cache_line_hash_table/</guid>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;In the world of multi-core processors, managing concurrent access to data structures is crucial for efficient performance. But frequent updates can trigger a hidden bottleneck: cache coherence traffic. This traffic arises when one core modifies the data another core has cached, forcing updates and invalidation across the system.&lt;/p&gt;&#xA;&lt;p&gt;This article dives into a clever solution: the Cache-Line Hash Table (CLHT).  CLHTs are specifically designed to minimize this cache coherence traffic, boosting the speed of concurrent data access. We&amp;rsquo;ll explore the core ideas behind CLHTs, including:&lt;/p&gt;</description>
    </item>
    <item>
      <title>A guide to Serializable Snapshot Isolation in Key/Value storage engine</title>
      <link>//localhost:1313/en/blog/serializable_snapshot_isolation/</link>
      <pubDate>Fri, 22 Mar 2024 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/serializable_snapshot_isolation/</guid>
      <description>&lt;p&gt;Ensuring data consistency in the face of concurrent transactions is a critical challenge in database management.&#xA;Traditional serializable isolation, while guaranteeing data integrity, often suffers from performance bottlenecks due to extensive locking.&#xA;This article explores Serializable Snapshot Isolation (SSI) that promises the best of both worlds:&#xA;strong data consistency without sacrificing performance.&#xA;The article delves into the inner workings of SSI and explore its implementation for a Key/Value storage engine. I will refer to the research&#xA;paper titled &lt;a href=&#34;https://dl.acm.org/doi/10.1145/2168836.2168853&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A critique of snapshot isolation&lt;/a&gt;&#xA;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Invoking C Code from Golang</title>
      <link>//localhost:1313/en/blog/invoking_c_from_go/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/invoking_c_from_go/</guid>
      <description>&lt;p&gt;The article attempts to explore Golang&amp;rsquo;s &amp;ldquo;C&amp;rdquo; package which allows invoking C code from Golang. Before we get into the idea&#xA;of invoking C code from Golang, let&amp;rsquo;s see a use-case where this might be needed.&lt;/p&gt;&#xA;&lt;h3 id=&#34;interfacing-with-an-existing-c-library&#34;&gt;Interfacing with an existing C library&lt;/h3&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s consider that we wish to develop a storage engine for pmem (persistent memory) in Golang. In order to develop this, we might want to use&#xA;&lt;a href=&#34;https://github.com/pmem/pmdk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pmdk - persistent memory development kit&lt;/a&gt;&#xA; which is written in C. This effectively means we want a way to bridge Golang and C code; invoke C code&#xA;from Golang.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
