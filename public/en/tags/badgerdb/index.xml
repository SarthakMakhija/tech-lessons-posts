<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BadgerDb on tech-lessons.in</title>
    <link>//localhost:1313/en/tags/badgerdb/</link>
    <description>Recent content in BadgerDb on tech-lessons.in</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 22 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/en/tags/badgerdb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A guide to Serializable Snapshot Isolation in Key/Value storage engine</title>
      <link>//localhost:1313/en/blog/serializable_snapshot_isolation/</link>
      <pubDate>Fri, 22 Mar 2024 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/serializable_snapshot_isolation/</guid>
      <description>&lt;p&gt;Ensuring data consistency in the face of concurrent transactions is a critical challenge in database management.&#xA;Traditional serializable isolation, while guaranteeing data integrity, often suffers from performance bottlenecks due to extensive locking.&#xA;This article explores Serializable Snapshot Isolation (SSI) that promises the best of both worlds:&#xA;strong data consistency without sacrificing performance.&#xA;The article delves into the inner workings of SSI and explore its implementation for a Key/Value storage engine. I will refer to the research&#xA;paper titled &lt;a href=&#34;https://dl.acm.org/doi/10.1145/2168836.2168853&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A critique of snapshot isolation&lt;/a&gt;&#xA;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>WiscKey: Separating Keys from Values in SSD-Conscious Storage</title>
      <link>//localhost:1313/en/blog/wisckey_ssd_conscious_key_value_store/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/wisckey_ssd_conscious_key_value_store/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Log-structured_merge-tree#:~:text=In%20computer%20science%2C%20the%20log,%2C%20maintain%20key%2Dvalue%20pairs.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LSM-tree&lt;/a&gt;&#xA; (Log structured merge tree) is a data structure typically used for write-heavy workloads. LSM-tree optimizes the write path by performing sequential writes to disk. WiscKey is a persistent LSM-tree-based key-value store that separates keys from values to minimize read and write amplification. The design of WiscKey is highly SSD optimized, leveraging both the device&amp;rsquo;s sequential and random performance characteristics.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This article summarises the &lt;a href=&#34;https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WiscKey&lt;/a&gt;&#xA; paper published in 2016.&lt;/p&gt;&#xA;&lt;p&gt;Before we understand the paper, it is essential to understand the LSM-tree data structure, read and write amplification in the LSM-tree and various SSD characteristics that should be considered while building an SSD-conscious storage engine.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
