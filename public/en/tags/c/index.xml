<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on tech-lessons.in</title>
    <link>//localhost:1313/en/tags/c/</link>
    <description>Recent content in C on tech-lessons.in</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 21 Dec 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/en/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Invoking C Code from Golang</title>
      <link>//localhost:1313/en/blog/invoking_c_from_go/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/invoking_c_from_go/</guid>
      <description>&lt;p&gt;The article attempts to explore Golang&amp;rsquo;s &amp;ldquo;C&amp;rdquo; package which allows invoking C code from Golang. Before we get into the idea&#xA;of invoking C code from Golang, let&amp;rsquo;s see a use-case where this might be needed.&lt;/p&gt;&#xA;&lt;h3 id=&#34;interfacing-with-an-existing-c-library&#34;&gt;Interfacing with an existing C library&lt;/h3&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s consider that we wish to develop a storage engine for pmem (persistent memory) in Golang. In order to develop this, we might want to use&#xA;&lt;a href=&#34;https://github.com/pmem/pmdk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pmdk - persistent memory development kit&lt;/a&gt;&#xA; which is written in C. This effectively means we want a way to bridge Golang and C code; invoke C code&#xA;from Golang.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
