<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on tech-lessons.in</title>
    <link>//localhost:1313/en/blog/</link>
    <description>Recent content in Blogs on tech-lessons.in</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/en/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building blocks of LSM based key/value storage engines: Introduction</title>
      <link>//localhost:1313/en/blog/building_blocks_of_lsm/</link>
      <pubDate>Thu, 10 Oct 2024 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/building_blocks_of_lsm/</guid>
      <description>&lt;h3 id=&#34;lsm-tree-overview&#34;&gt;LSM-tree: Overview&lt;/h3&gt;&#xA;&lt;p&gt;LSM-tree is a write-optimized data structure implemented by storage engines for supporting write-heavy workloads. A lot of storage&#xA;engines including &lt;a href=&#34;https://github.com/dgraph-io/badger&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BadgerDB&lt;/a&gt;&#xA;, &lt;a href=&#34;https://github.com/facebook/rocksdb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RocksDB&lt;/a&gt;&#xA; and &lt;a href=&#34;https://github.com/google/leveldb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LevelDB&lt;/a&gt;&#xA; use LSM-tree as their core&#xA;data structure.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Storage engine is a software module that provides data structures for efficient reads and writes.&#xA;The two most common data structures are B+Tree (read-optimized) and LSM-tree (write-optimized).&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s look at the structure of LSM-tree to understand why it is write-optimized.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building blocks of LSM based key/value storage engines: Memtable</title>
      <link>//localhost:1313/en/blog/building_blocks_of_lsm_memtable/</link>
      <pubDate>Thu, 10 Oct 2024 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/building_blocks_of_lsm_memtable/</guid>
      <description>&lt;h3 id=&#34;memtable&#34;&gt;Memtable&lt;/h3&gt;&#xA;&lt;p&gt;A fixed-size in-memory data structure that temporarily stores incoming writes until it reaches capacity. Each memtable typically&#xA;has a corresponding Write-Ahead Log (WAL) to ensure durability.&lt;/p&gt;&#xA;&lt;p&gt;Storage engines like Badger maintain an active (or current) memtable and a collection of inactive (or immutable) memtables.&#xA;When the active memtable fills up, its WAL is flushed, and the memtable becomes immutable. A new active memtable is then created&#xA;to handle subsequent writes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building blocks of LSM based key/value storage engines: WAL</title>
      <link>//localhost:1313/en/blog/building_blocks_of_lsm_wal/</link>
      <pubDate>Thu, 10 Oct 2024 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/building_blocks_of_lsm_wal/</guid>
      <description>&lt;p&gt;The Write-Ahead Log (WAL) is a fundamental component of LSM-based key-value storage engines, ensuring data durability and&#xA;enabling recovery from system failures. The concept is straightforward: a WAL is an append-only log file on disk.&#xA;In an LSM-based storage engine, every write operation, whether it&amp;rsquo;s a single key-value pair or a transactional batch, is first&#xA;recorded in the WAL before being added to the active memtable. This append-only nature of WALs allows for efficient sequential disk&#xA;access.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Many flavors of Networking IO</title>
      <link>//localhost:1313/en/blog/many_flavors_of_networking_io/</link>
      <pubDate>Wed, 22 May 2024 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/many_flavors_of_networking_io/</guid>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;The foundation of any networked application hinges on its ability to efficiently handle data exchange.&#xA;But beneath the surface, there&amp;rsquo;s a hidden world of techniques for managing this communication.&#xA;This article dives into various &amp;ldquo;flavors&amp;rdquo; of networking IO, exploring the trade-offs associated with each approach.&lt;/p&gt;&#xA;&lt;p&gt;To illustrate various ways applications handle network traffic, we&amp;rsquo;ll build a TCP server using four distinct approaches:&#xA;&lt;strong&gt;blocking I/O with a single thread&lt;/strong&gt;, &lt;strong&gt;blocking I/O with multiple threads&lt;/strong&gt;, &lt;strong&gt;non-blocking I/O with busy waiting&lt;/strong&gt;, and&#xA;&lt;strong&gt;a single-threaded event loop&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cache-Line Hash Table</title>
      <link>//localhost:1313/en/blog/cache_line_hash_table/</link>
      <pubDate>Fri, 19 Apr 2024 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/cache_line_hash_table/</guid>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;In the world of multi-core processors, managing concurrent access to data structures is crucial for efficient performance. But frequent updates can trigger a hidden bottleneck: cache coherence traffic. This traffic arises when one core modifies the data another core has cached, forcing updates and invalidation across the system.&lt;/p&gt;&#xA;&lt;p&gt;This article dives into a clever solution: the Cache-Line Hash Table (CLHT).  CLHTs are specifically designed to minimize this cache coherence traffic, boosting the speed of concurrent data access. We&amp;rsquo;ll explore the core ideas behind CLHTs, including:&lt;/p&gt;</description>
    </item>
    <item>
      <title>A guide to Serializable Snapshot Isolation in Key/Value storage engine</title>
      <link>//localhost:1313/en/blog/serializable_snapshot_isolation/</link>
      <pubDate>Fri, 22 Mar 2024 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/serializable_snapshot_isolation/</guid>
      <description>&lt;p&gt;Ensuring data consistency in the face of concurrent transactions is a critical challenge in database management.&#xA;Traditional serializable isolation, while guaranteeing data integrity, often suffers from performance bottlenecks due to extensive locking.&#xA;This article explores Serializable Snapshot Isolation (SSI) that promises the best of both worlds:&#xA;strong data consistency without sacrificing performance.&#xA;The article delves into the inner workings of SSI and explore its implementation for a Key/Value storage engine. I will refer to the research&#xA;paper titled &lt;a href=&#34;https://dl.acm.org/doi/10.1145/2168836.2168853&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A critique of snapshot isolation&lt;/a&gt;&#xA;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Diving into Rust by building an assertions crate</title>
      <link>//localhost:1313/en/blog/diving_into_rust/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/diving_into_rust/</guid>
      <description>&lt;p&gt;As Rust projects grow in size and complexity, the need for sophisticated error handling tools becomes ever more pressing.&#xA;Traditional methods like panics and asserts, while useful, can be limited and cumbersome.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s build an assertions crate that offers elegant and powerful assertions, while simultaneously diving into the diverse landscape of Rust features.&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s define some requirements for our crate. The assertions crate should:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Offer Fluent API&lt;/strong&gt;: chain assertions for a natural and readable experience.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Have extensive assertions&lt;/strong&gt;: variety of assertions covering common validation needs.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Be customizable&lt;/strong&gt;: extend with custom assertions for specific domain requirements.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Be type-safe&lt;/strong&gt;: leverage Rust&amp;rsquo;s type system for reliable assertions.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Consider this password validation example as a glimpse into the crate&amp;rsquo;s ability to create meaningful and expressive assertions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing an in-memory LFU cache</title>
      <link>//localhost:1313/en/blog/designing_lfu_cache/</link>
      <pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/designing_lfu_cache/</guid>
      <description>&lt;p&gt;I had been working on building an in-memory LFU cache (least frequently used cache) and now that it is done, I thought of writing about the building blocks of an LFU cache. This article shares the building blocks of an LFU cache along with the ideas from two research papers: &lt;a href=&#34;https://dgraph.io/blog/refs/TinyLFU%20-%20A%20Highly%20Efficient%20Cache%20Admission%20Policy.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TinyLFU&lt;/a&gt;&#xA; and &lt;a href=&#34;https://dgraph.io/blog/refs/bp_wrapper.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BP-Wrapper&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SarthakMakhija/cached&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CacheD&lt;/a&gt;&#xA; is the name of my cache, and it is inspired by &lt;a href=&#34;https://github.com/dgraph-io/ristretto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ristretto&lt;/a&gt;&#xA;.&#xA;I know &lt;strong&gt;CacheD&lt;/strong&gt; is a very creative name. Thank you.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bitcask - A Log-Structured Hash Table</title>
      <link>//localhost:1313/en/blog/bitcask/</link>
      <pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/bitcask/</guid>
      <description>&lt;p&gt;Bitcask is an embeddable key/value storage engine that is defined as a &amp;ldquo;Log-Structured Hash Table&amp;rdquo; in the paper that introduced it. Bitcask follows a simple model: all the&#xA;key/value pairs are written to &lt;em&gt;append-only files&lt;/em&gt;, and an in-memory data structure contains a mapping between each key and the position of the value in the data file.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s understand the different components of Bitcask.&lt;/p&gt;&#xA;&lt;h3 id=&#34;bitcask-components&#34;&gt;Bitcask components&lt;/h3&gt;&#xA;&lt;p&gt;Bitcask is a straightforward model to understand. It consists of two components:&lt;/p&gt;</description>
    </item>
    <item>
      <title>WiscKey: Separating Keys from Values in SSD-Conscious Storage</title>
      <link>//localhost:1313/en/blog/wisckey_ssd_conscious_key_value_store/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/wisckey_ssd_conscious_key_value_store/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Log-structured_merge-tree#:~:text=In%20computer%20science%2C%20the%20log,%2C%20maintain%20key%2Dvalue%20pairs.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LSM-tree&lt;/a&gt;&#xA; (Log structured merge tree) is a data structure typically used for write-heavy workloads. LSM-tree optimizes the write path by performing sequential writes to disk. WiscKey is a persistent LSM-tree-based key-value store that separates keys from values to minimize read and write amplification. The design of WiscKey is highly SSD optimized, leveraging both the device&amp;rsquo;s sequential and random performance characteristics.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This article summarises the &lt;a href=&#34;https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WiscKey&lt;/a&gt;&#xA; paper published in 2016.&lt;/p&gt;&#xA;&lt;p&gt;Before we understand the paper, it is essential to understand the LSM-tree data structure, read and write amplification in the LSM-tree and various SSD characteristics that should be considered while building an SSD-conscious storage engine.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bloom filter</title>
      <link>//localhost:1313/en/blog/bloom_filter/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/bloom_filter/</guid>
      <description>&lt;p&gt;A Bloom filter is a probabilistic data structure&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; used to test whether an element is a set member. A bloom filter can query against large amounts of data and return either &amp;ldquo;possibly in the set&amp;rdquo; or &amp;ldquo;definitely not in the set&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;A bloom filter can have false positives, but false negatives are impossible.&lt;/p&gt;&#xA;&lt;p&gt;Elements can only be added to the set, &lt;em&gt;but not removed&lt;/em&gt; (though this can be addressed with the counting bloom filter variant).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Code without automated tests? Are we serious?</title>
      <link>//localhost:1313/en/blog/code_without_tests/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/code_without_tests/</guid>
      <description>&lt;p&gt;Automated tests are an essential part of every piece of code that we write. The benefits of these tests are so compelling that it does not even&#xA;make sense to think about writing code without tests or writing code today and adding tests later. Despite the benefits, we still see code without tests,&#xA;we still see ideas like &amp;ldquo;writing code today and adding tests when the delivery pressure reduces&amp;rdquo; floating around.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Count-min sketch</title>
      <link>//localhost:1313/en/blog/count_min_sketch/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/count_min_sketch/</guid>
      <description>&lt;p&gt;Count-min sketch (CM sketch) is a probabilistic data structure&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; used to estimate the frequency of events in a data stream.&lt;/p&gt;&#xA;&lt;p&gt;It relies on hash functions to map events to frequencies, but unlike a hash table, it uses only sublinear space at the expense of over-counting some events due to hash collisions. The count–min sketch was invented in 2003 by Graham Cormode and S. Muthu Muthukrishnan.&lt;/p&gt;&#xA;&lt;h3 id=&#34;understanding-count-min-sketch&#34;&gt;Understanding Count-min Sketch&lt;/h3&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s say we want to build a solution to count the frequency of elements in a data stream. One idea would be to use a &lt;code&gt;hashmap&lt;/code&gt; with the data element as the key and count as the value. The approach works but does not scale with a data stream comprising billions of elements, the most unique.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Persistent memory - Introduction</title>
      <link>//localhost:1313/en/blog/persistent_memory/</link>
      <pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/persistent_memory/</guid>
      <description></description>
    </item>
    <item>
      <title>Invoking C Code from Golang</title>
      <link>//localhost:1313/en/blog/invoking_c_from_go/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/invoking_c_from_go/</guid>
      <description>&lt;p&gt;The article attempts to explore Golang&amp;rsquo;s &amp;ldquo;C&amp;rdquo; package which allows invoking C code from Golang. Before we get into the idea&#xA;of invoking C code from Golang, let&amp;rsquo;s see a use-case where this might be needed.&lt;/p&gt;&#xA;&lt;h3 id=&#34;interfacing-with-an-existing-c-library&#34;&gt;Interfacing with an existing C library&lt;/h3&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s consider that we wish to develop a storage engine for pmem (persistent memory) in Golang. In order to develop this, we might want to use&#xA;&lt;a href=&#34;https://github.com/pmem/pmdk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pmdk - persistent memory development kit&lt;/a&gt;&#xA; which is written in C. This effectively means we want a way to bridge Golang and C code; invoke C code&#xA;from Golang.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Diving into Java Bytecode</title>
      <link>//localhost:1313/en/blog/diving_into_java_bytecode/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/diving_into_java_bytecode/</guid>
      <description>&lt;blockquote class=&#34;wp-block-quote&#34;&gt;&#xA;    &lt;p&gt;Java code is compiled into an intermediate representation called &#34;bytecode&#34;. It is this bytecode which gets executed by JVM and is later converted into machine specific instructions by JIT compiler. With this article, we attempt to dive into bytecode and understand the internals of various bytecode operations.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s get an understanding of some terms before we start to dive in.&lt;/p&gt;&#xA;&lt;h3 id=&#34;terminology&#34;&gt;Terminology&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Bytecode&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;An intermediate representation of Java code which JVM understands.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Lambda - A Virtual Podcast</title>
      <link>//localhost:1313/en/blog/aws_lambda_a_virtual_podcast/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/aws_lambda_a_virtual_podcast/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;AWS Lambda is a serverless compute service and after having worked with it for some time, I felt it is a good time for me to share my learning and experiences. I have been thinking of writing an article in a &amp;ldquo;Virtual Podcast format&amp;rdquo; and felt this could be the one.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Welcome all to this article named &lt;em&gt;AWS Lambda - A Virtual Podcast&lt;/em&gt; and let me introduce our guests Mr. Hernandez and Ms. Jessica who would walk us through their experiences of using AWS Lambda.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Concluding Serverless Journey</title>
      <link>//localhost:1313/en/blog/concluding_serverless_journey/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/concluding_serverless_journey/</guid>
      <description>&lt;p&gt;We have come a long way in our &lt;a href=&#34;//localhost:1313/en/blog/beginning_serverless_journey&#34;&gt;Serverless journey&lt;/a&gt;&#xA;. This journey which started with building a serverless application has finally come to a stage where we can see all&#xA;our hard work in action. We will be deploying our application in this article.&lt;/p&gt;&#xA;&lt;p&gt;We will be using &lt;a href=&#34;https://docs.aws.amazon.com/cdk/latest/guide/home.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS CDK&lt;/a&gt;&#xA; to deploy our application. Before we start using CDK, let&amp;rsquo;s quickly look at what is CDK -&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The AWS Cloud Development Kit (AWS CDK) is an open source software development framework to model and provision your cloud application resources using familiar programming languages.&#xA;Provisioning cloud applications can be a challenging process that requires you to perform manual actions, write custom scripts, maintain templates, or learn domain-specific languages.&#xA;AWS CDK uses the familiarity and expressive power of programming languages for modeling your applications. It provides you with high-level components that preconfigure cloud resources with&#xA;proven defaults, so you can build cloud applications without needing to be an expert. AWS CDK provisions your resources in a safe, repeatable manner through AWS CloudFormation&lt;/strong&gt;.&#xA;It also enables you to compose and share your own custom components that incorporate your organization&amp;rsquo;s requirements, helping you start new projects faster.&#xA;&lt;a href=&#34;https://aws.amazon.com/cdk/&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/cdk/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://aws.amazon.com/cdk/&lt;/a&gt;&#xA;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testing Serverless Journey</title>
      <link>//localhost:1313/en/blog/testing_serverless_journey/</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/testing_serverless_journey/</guid>
      <description>&lt;p&gt;It is time to test our &lt;a href=&#34;//localhost:1313/en/blog/beginning_serverless_journey&#34;&gt;Serverless journey&lt;/a&gt;&#xA; which started with a web application that involved an AWS lambda, an API Gateway and DynamoDB.&lt;/p&gt;&#xA;&lt;p&gt;We had some unit tests for our controller, service and request objects. But, these tests don&amp;rsquo;t give us the kind of confidence we need to deploy our application. At this stage we don&amp;rsquo;t even know if the query that is written in the repository is going to work properly or not, forget about releasing the application.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beginning Serverless Journey</title>
      <link>//localhost:1313/en/blog/beginning_serverless_journey/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/beginning_serverless_journey/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Serverless is a paradigm that lays its foundations on the fact that &amp;ldquo;We don&amp;rsquo;t have to provision and manage servers&amp;rdquo;.&#xA;This article series explores various aspects involved in a serverless application lifecycle including - development, testing and deployment.&#xA;Our serverless journey which starts from building to deploying an application will be using multiple serverless components including AWS Lambda, AWS API Gateway, AWS DynamoDB, LocalStack and AWS CDK.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Let us deep dive step by step into what it takes to build a Serverless application.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Invest In Blogging</title>
      <link>//localhost:1313/en/blog/invest_in_blogging/</link>
      <pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/invest_in_blogging/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;We often have a lot to share with people, this could be our learnings, our opinions and our experiences. There are times when we feel the need to get our ideas validated or get feedback from people. These are definitely some of the reasons to invest in blogging and connect with community.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s see some reasons for investing in writing blogs.&#xA;&lt;img src=&#34;//localhost:1313/invest-in-blogging.jpg&#34; alt=&#34;Invest in blogging&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;help-people-learn-from-your-learning-journey&#34;&gt;Help people learn from your learning journey&lt;/h3&gt;&#xA;&lt;p&gt;There are times when we often feel &amp;ldquo;it would have been great if someone had written an article to explain a concept&amp;rdquo;, start writing if you have had this feeling.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kotlin DSL</title>
      <link>//localhost:1313/en/blog/kotlin_dsl/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/kotlin_dsl/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A domain-specific language (DSL) is a computer language specialized to a particular application domain. This is in contrast to a general-purpose language (GPL), which is broadly applicable across domains. There are a wide variety of DSLs, ranging from widely used languages for common domains, such as HTML for web pages, down to languages used by only one or a few pieces of software.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;kotlin-dsl&#34;&gt;Kotlin DSL&lt;/h3&gt;&#xA;&lt;p&gt;Kotlin provides first class support for DSL which allows us to express domain-specific operations much more concisely than an equivalent piece of code in a general-purpose language.&#xA;Let&amp;rsquo;s try and build a simple DSL in Kotlin -&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kotlin Wishlist for Java</title>
      <link>//localhost:1313/en/blog/kotlin_wishlist_for_java/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/kotlin_wishlist_for_java/</guid>
      <description>&lt;p&gt;There is no doubt that Java has enjoyed a superior position when it comes to programming languages and is considered as one of the most important languages for development. However, there have been a number of languages developed on top of the JVM, like &lt;a href=&#34;https://kotlinlang.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow noopener noreferrer&#34;&gt;Kotlin&lt;/a&gt;&#xA;Kotlin is a statically typed programming language for modern multi-platform applications. While I have been a Java developer for quite a long while, working on the &lt;a href=&#34;https://github.com/dataanon/data-anon&#34; target=&#34;_blank&#34; rel=&#34;nofollow noopener noreferrer&#34;&gt;data-anonymization&lt;/a&gt; project made me feel that there are things that Java should consider importing from Kotlin.&#xA;These are some Kotlin features that I would love to see making a place in Java.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Let’s deal with Legacy code</title>
      <link>//localhost:1313/en/blog/lets_deal_with_legacy_code/</link>
      <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/lets_deal_with_legacy_code/</guid>
      <description>&lt;p&gt;This article is in continuation with the &lt;a href=&#34;//localhost:1313/en/blog/lets_define_legacy_code/&#34;&gt;previous article&lt;/a&gt; where we defined some key aspects of Legacy code. In this article we will learn to deal with Legacy code.&#xA;Before we begin with an example, let’s take a moment to understand &lt;em class=&#34;markup--em markup--p-em&#34;&gt;Broken Window Theory.&lt;/em&gt;&lt;/p&gt;&lt;/p&gt;&#xA;&lt;img class=&#34;align-center&#34; title=&#34;Broken Window Theory&#34; src=&#34;//localhost:1313/broken-window.jpeg&#34; alt=&#34;Broken Window Theory&#34; /&gt;&#xA;&lt;h3 id=&#34;broken-window-theory&#34;&gt;Broken Window Theory&lt;/h3&gt;&#xA;&lt;p&gt;An academic theory proposed by &lt;em&gt;James Q. Wilson and George Kelling&lt;/em&gt; in 1982 that used broken windows as a metaphor for disorder within neighbourhoods.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Let&#39;s define Legacy code</title>
      <link>//localhost:1313/en/blog/lets_define_legacy_code/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/lets_define_legacy_code/</guid>
      <description>&lt;p&gt;&amp;ldquo;I have been having sleepless nights trying to add features in the code that we acquired from other company. I am dealing with the purest form of &lt;em&gt;Legacy code&lt;/em&gt;.&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;I am having a real hard time dealing with tangled, unstructured code that I have to work with, but I don’t understand a bit. &lt;em&gt;Legacy code&lt;/em&gt;&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Legacy code&lt;/em&gt; is a term which probably has a lot of different definitions like: code acquired from someone else, code written by someone else, code that is hard to understand or code written in outdated technologies. Whatever be the definition, most of us believe &lt;em&gt;Legacy code is Scary.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flips: Feature Flipping for Java</title>
      <link>//localhost:1313/en/blog/flips_feature_flipping_for_java/</link>
      <pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/blog/flips_feature_flipping_for_java/</guid>
      <description>&lt;img title=&#34;Flips&#34; src=&#34;//localhost:1313/flips.jpg&#34; alt=&#34;Flips&#34; /&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Feature-Flip/flips&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flips&lt;/a&gt;&#xA; is an implementation of the Feature Toggles pattern for Java and Spring (Spring Core / Spring MVC/ Spring Boot) based application.&#xA;&lt;a href=&#34;https://martinfowler.com/articles/feature-toggles.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Feature Toggle&lt;/a&gt;&#xA; is a powerful technique that allows teams to modify the system behavior and deliver new functionality to end-users rapidly and safely.&lt;/p&gt;&#xA;&lt;h3 id=&#34;why-another-library-for-feature-toggles&#34;&gt;Why Another Library for Feature Toggles?&lt;/h3&gt;&#xA;&lt;p&gt;The idea behind &lt;strong&gt;Flips&lt;/strong&gt; is to let the clients implement toggles with &lt;em&gt;minimum configuration and coding&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The main motivations behind implementing this library were:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
