
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    [{"author":"Sarthak Makhija","categories":null,"contents":"\u003ch3 id=\"lsm-tree-overview\"\u003eLSM-tree: Overview\u003c/h3\u003e\n\u003cp\u003eLSM-tree is a write-optimized data structure implemented by storage engines for supporting write-heavy workloads. A lot of storage\nengines including \u003ca href=\"https://github.com/dgraph-io/badger\" target=\"_blank\" rel=\"noopener\"\u003eBadgerDB\u003c/a\u003e\n, \u003ca href=\"https://github.com/facebook/rocksdb\" target=\"_blank\" rel=\"noopener\"\u003eRocksDB\u003c/a\u003e\n and \u003ca href=\"https://github.com/google/leveldb\" target=\"_blank\" rel=\"noopener\"\u003eLevelDB\u003c/a\u003e\n use LSM-tree as their core\ndata structure.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eStorage engine is a software module that provides data structures for efficient reads and writes.\nThe two most common data structures are B+Tree (read-optimized) and LSM-tree (write-optimized).\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLet\u0026rsquo;s look at the structure of LSM-tree to understand why it is write-optimized.\u003c/p\u003e","date":"2024-10-10T00:00:00Z","permalink":"//localhost:1313/en/blog/building_blocks_of_lsm/","tags":["LSM","Building blocks of LSM"],"title":"Building blocks of LSM based key/value storage engines: Introduction"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003ch3 id=\"memtable\"\u003eMemtable\u003c/h3\u003e\n\u003cp\u003eA fixed-size in-memory data structure that temporarily stores incoming writes until it reaches capacity. Each memtable typically\nhas a corresponding Write-Ahead Log (WAL) to ensure durability.\u003c/p\u003e\n\u003cp\u003eStorage engines like Badger maintain an active (or current) memtable and a collection of inactive (or immutable) memtables.\nWhen the active memtable fills up, its WAL is flushed, and the memtable becomes immutable. A new active memtable is then created\nto handle subsequent writes.\u003c/p\u003e","date":"2024-10-10T00:00:00Z","permalink":"//localhost:1313/en/blog/building_blocks_of_lsm_memtable/","tags":["LSM","Building blocks of LSM","Memtable"],"title":"Building blocks of LSM based key/value storage engines: Memtable"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cp\u003eThe Write-Ahead Log (WAL) is a fundamental component of LSM-based key-value storage engines, ensuring data durability and\nenabling recovery from system failures. The concept is straightforward: a WAL is an append-only log file on disk.\nIn an LSM-based storage engine, every write operation, whether it\u0026rsquo;s a single key-value pair or a transactional batch, is first\nrecorded in the WAL before being added to the active memtable. This append-only nature of WALs allows for efficient sequential disk\naccess.\u003c/p\u003e","date":"2024-10-10T00:00:00Z","permalink":"//localhost:1313/en/blog/building_blocks_of_lsm_wal/","tags":["LSM","Building blocks of LSM","WAL"],"title":"Building blocks of LSM based key/value storage engines: WAL"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eThe foundation of any networked application hinges on its ability to efficiently handle data exchange.\nBut beneath the surface, there\u0026rsquo;s a hidden world of techniques for managing this communication.\nThis article dives into various \u0026ldquo;flavors\u0026rdquo; of networking IO, exploring the trade-offs associated with each approach.\u003c/p\u003e\n\u003cp\u003eTo illustrate various ways applications handle network traffic, we\u0026rsquo;ll build a TCP server using four distinct approaches:\n\u003cstrong\u003eblocking I/O with a single thread\u003c/strong\u003e, \u003cstrong\u003eblocking I/O with multiple threads\u003c/strong\u003e, \u003cstrong\u003enon-blocking I/O with busy waiting\u003c/strong\u003e, and\n\u003cstrong\u003ea single-threaded event loop\u003c/strong\u003e.\u003c/p\u003e","date":"2024-05-22T00:00:00Z","permalink":"//localhost:1313/en/blog/many_flavors_of_networking_io/","tags":["TCP","Networking","Golang","Event loop"],"title":"Many flavors of Networking IO"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eIn the world of multi-core processors, managing concurrent access to data structures is crucial for efficient performance. But frequent updates can trigger a hidden bottleneck: cache coherence traffic. This traffic arises when one core modifies the data another core has cached, forcing updates and invalidation across the system.\u003c/p\u003e\n\u003cp\u003eThis article dives into a clever solution: the Cache-Line Hash Table (CLHT).  CLHTs are specifically designed to minimize this cache coherence traffic, boosting the speed of concurrent data access. We\u0026rsquo;ll explore the core ideas behind CLHTs, including:\u003c/p\u003e","date":"2024-04-19T00:00:00Z","permalink":"//localhost:1313/en/blog/cache_line_hash_table/","tags":["CPU Cache-Line","Hash Table","CLHT","Cache-Line Hash Table","Golang","xsync"],"title":"Cache-Line Hash Table"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cp\u003eEnsuring data consistency in the face of concurrent transactions is a critical challenge in database management.\nTraditional serializable isolation, while guaranteeing data integrity, often suffers from performance bottlenecks due to extensive locking.\nThis article explores Serializable Snapshot Isolation (SSI) that promises the best of both worlds:\nstrong data consistency without sacrificing performance.\nThe article delves into the inner workings of SSI and explore its implementation for a Key/Value storage engine. I will refer to the research\npaper titled \u003ca href=\"https://dl.acm.org/doi/10.1145/2168836.2168853\" target=\"_blank\" rel=\"noopener\"\u003eA critique of snapshot isolation\u003c/a\u003e\n.\u003c/p\u003e","date":"2024-03-22T00:00:00Z","permalink":"//localhost:1313/en/blog/serializable_snapshot_isolation/","tags":["Golang","Transaction","Isolation","Serializable Snapshot Isolation","BadgerDb"],"title":"A guide to Serializable Snapshot Isolation in Key/Value storage engine"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cp\u003eAs Rust projects grow in size and complexity, the need for sophisticated error handling tools becomes ever more pressing.\nTraditional methods like panics and asserts, while useful, can be limited and cumbersome.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s build an assertions crate that offers elegant and powerful assertions, while simultaneously diving into the diverse landscape of Rust features.\u003c/p\u003e\n\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s define some requirements for our crate. The assertions crate should:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eOffer Fluent API\u003c/strong\u003e: chain assertions for a natural and readable experience.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHave extensive assertions\u003c/strong\u003e: variety of assertions covering common validation needs.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBe customizable\u003c/strong\u003e: extend with custom assertions for specific domain requirements.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBe type-safe\u003c/strong\u003e: leverage Rust\u0026rsquo;s type system for reliable assertions.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eConsider this password validation example as a glimpse into the crate\u0026rsquo;s ability to create meaningful and expressive assertions.\u003c/p\u003e","date":"2024-01-24T00:00:00Z","permalink":"//localhost:1313/en/blog/diving_into_rust/","tags":["Rust","Assertions","Elegant-assertions","Clearcheck"],"title":"Diving into Rust by building an assertions crate"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003ch2 id=\"my-projects\"\u003eMy Projects\u003c/h2\u003e\n\u003cp\u003eI love tinkering with projects when I\u0026rsquo;m not busy.\u003c/p\u003e\n\u003ch3 id=\"go-lsmhttpsgithubcomsarthakmakhijago-lsm\"\u003eðŸ”¹\u003ca href=\"https://github.com/SarthakMakhija/go-lsm\" target=\"_blank\" rel=\"noopener\"\u003eGo-LSM\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eLSM-based key-value store in Go for educational purpose, \u003ca href=\"https://skyzh.github.io/mini-lsm/00-preface.html\" target=\"_blank\" rel=\"noopener\"\u003einspired by LSM in a Week\u003c/a\u003e\n.\nIt is a rewrite of the \u003ca href=\"https://github.com/SarthakMakhija/storage-engine-workshop\" target=\"_blank\" rel=\"noopener\"\u003eexisting workshop code\u003c/a\u003e\n.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExploring LSM with go-lsm\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLearn LSM from the ground up\u003c/strong\u003e: Dive deep into the core concepts of Log-Structured Merge-Trees (LSM) through a practical, well-documented implementation.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBenefit from clean code\u003c/strong\u003e: Analyze a meticulously crafted codebase that prioritizes simplicity and readability.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGain confidence with robust tests\u003c/strong\u003e: Verify the correctness and reliability of the storage engine through comprehensive tests.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExperiment and extend\u003c/strong\u003e: Customize the code to explore different LSM variations or integrate it into your own projects.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-clearcheckhttpsgithubcomsarthakmakhijaclearcheck\"\u003eðŸ”¹ \u003ca href=\"https://github.com/SarthakMakhija/clearcheck\" target=\"_blank\" rel=\"noopener\"\u003eClearcheck\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eWrite expressive and elegant assertions with ease!\u003c/p\u003e","date":"2024-01-20T00:00:00Z","permalink":"//localhost:1313/en/page/projects/","tags":null,"title":"My projects"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cp\u003eI had been working on building an in-memory LFU cache (least frequently used cache) and now that it is done, I thought of writing about the building blocks of an LFU cache. This article shares the building blocks of an LFU cache along with the ideas from two research papers: \u003ca href=\"https://dgraph.io/blog/refs/TinyLFU%20-%20A%20Highly%20Efficient%20Cache%20Admission%20Policy.pdf\" target=\"_blank\" rel=\"noopener\"\u003eTinyLFU\u003c/a\u003e\n and \u003ca href=\"https://dgraph.io/blog/refs/bp_wrapper.pdf\" target=\"_blank\" rel=\"noopener\"\u003eBP-Wrapper\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/SarthakMakhija/cached\" target=\"_blank\" rel=\"noopener\"\u003eCacheD\u003c/a\u003e\n is the name of my cache, and it is inspired by \u003ca href=\"https://github.com/dgraph-io/ristretto\" target=\"_blank\" rel=\"noopener\"\u003eRistretto\u003c/a\u003e\n.\nI know \u003cstrong\u003eCacheD\u003c/strong\u003e is a very creative name. Thank you.\u003c/p\u003e","date":"2023-05-26T00:00:00Z","permalink":"//localhost:1313/en/blog/designing_lfu_cache/","tags":["Cache","TinyLFU","CacheD"],"title":"Designing an in-memory LFU cache"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cp\u003eBitcask is an embeddable key/value storage engine that is defined as a \u0026ldquo;Log-Structured Hash Table\u0026rdquo; in the paper that introduced it. Bitcask follows a simple model: all the\nkey/value pairs are written to \u003cem\u003eappend-only files\u003c/em\u003e, and an in-memory data structure contains a mapping between each key and the position of the value in the data file.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s understand the different components of Bitcask.\u003c/p\u003e\n\u003ch3 id=\"bitcask-components\"\u003eBitcask components\u003c/h3\u003e\n\u003cp\u003eBitcask is a straightforward model to understand. It consists of two components:\u003c/p\u003e","date":"2023-05-04T00:00:00Z","permalink":"//localhost:1313/en/blog/bitcask/","tags":["Bitcask","Storage engine","Log Structured"],"title":"Bitcask - A Log-Structured Hash Table"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Log-structured_merge-tree#:~:text=In%20computer%20science%2C%20the%20log,%2C%20maintain%20key%2Dvalue%20pairs.\" target=\"_blank\" rel=\"noopener\"\u003eLSM-tree\u003c/a\u003e\n (Log structured merge tree) is a data structure typically used for write-heavy workloads. LSM-tree optimizes the write path by performing sequential writes to disk. WiscKey is a persistent LSM-tree-based key-value store that separates keys from values to minimize read and write amplification. The design of WiscKey is highly SSD optimized, leveraging both the device\u0026rsquo;s sequential and random performance characteristics.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThis article summarises the \u003ca href=\"https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf\" target=\"_blank\" rel=\"noopener\"\u003eWiscKey\u003c/a\u003e\n paper published in 2016.\u003c/p\u003e\n\u003cp\u003eBefore we understand the paper, it is essential to understand the LSM-tree data structure, read and write amplification in the LSM-tree and various SSD characteristics that should be considered while building an SSD-conscious storage engine.\u003c/p\u003e","date":"2023-03-10T00:00:00Z","permalink":"//localhost:1313/en/blog/wisckey_ssd_conscious_key_value_store/","tags":["Storage engine","LSM-tree","WiscKey","SSD-conscious","BadgerDb"],"title":"WiscKey: Separating Keys from Values in SSD-Conscious Storage"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cp\u003eA Bloom filter is a probabilistic data structure\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e used to test whether an element is a set member. A bloom filter can query against large amounts of data and return either \u0026ldquo;possibly in the set\u0026rdquo; or \u0026ldquo;definitely not in the set\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eA bloom filter can have false positives, but false negatives are impossible.\u003c/p\u003e\n\u003cp\u003eElements can only be added to the set, \u003cem\u003ebut not removed\u003c/em\u003e (though this can be addressed with the counting bloom filter variant).\u003c/p\u003e","date":"2023-02-25T00:00:00Z","permalink":"//localhost:1313/en/blog/bloom_filter/","tags":["Bloom filter","Storage engine","Probabilistic data structure"],"title":"Bloom filter"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cstyle\u003e\n .social{\n    display: inline-block;\n    text-align: left;\n    width: 100%;\n    color: #a6a6a6;\n    font-size: .9em;\n}\n\u003c/style\u003e\n\u003cdiv class=\"self-container\"\u003e\n    \u003cp\u003e\u003cimg class=\"self-image\" alt=\"Sarthak Makhija\" src=\"/self.png\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cp\u003eI am Sarthak Makhija, and I am an application developer at ThoughtWorks. I had worked with Citigroup and TCS before I joined ThoughtWorks.\u003c/p\u003e\n\u003cp\u003eI am currently leading a team that is developing a \u003cstrong\u003estrongly consistent\u003c/strong\u003e \u003cstrong\u003edistributed\u003c/strong\u003e \u003cstrong\u003ekey/value storage\u003c/strong\u003e engine in Go.\u003c/p\u003e\n\u003cp\u003eThe technical ideas of our distributed key/value storage engine include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://go.dev/\" target=\"_blank\" rel=\"noopener\"\u003egolang\u003c/a\u003e\n as the programming language\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://etcd.io/\" target=\"_blank\" rel=\"noopener\"\u003eetcd\u003c/a\u003e\n as the metadata store\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/dgraph-io/badger\" target=\"_blank\" rel=\"noopener\"\u003ebadger\u003c/a\u003e\n as the key/value storage engine\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://raft.github.io/\" target=\"_blank\" rel=\"noopener\"\u003eraft (/multi-raft)\u003c/a\u003e\n as the consensus algorithm and\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://martinfowler.com/articles/patterns-of-distributed-systems/two-phase-commit.html\" target=\"_blank\" rel=\"noopener\"\u003etwo-phase commit\u003c/a\u003e\n with serial isolation level\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBeyond my professional work, I\u0026rsquo;m passionate about sharing my knowledge and getting feedback from the community:\u003c/p\u003e","date":"2023-02-24T00:00:00Z","permalink":"//localhost:1313/en/page/about/","tags":null,"title":"About Me"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cp\u003eAutomated tests are an essential part of every piece of code that we write. The benefits of these tests are so compelling that it does not even\nmake sense to think about writing code without tests or writing code today and adding tests later. Despite the benefits, we still see code without tests,\nwe still see ideas like \u0026ldquo;writing code today and adding tests when the delivery pressure reduces\u0026rdquo; floating around.\u003c/p\u003e","date":"2023-02-24T00:00:00Z","permalink":"//localhost:1313/en/blog/code_without_tests/","tags":["Agile","Testing","Refactoring"],"title":"Code without automated tests? Are we serious?"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cp\u003eCount-min sketch (CM sketch) is a probabilistic data structure\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e used to estimate the frequency of events in a data stream.\u003c/p\u003e\n\u003cp\u003eIt relies on hash functions to map events to frequencies, but unlike a hash table, it uses only sublinear space at the expense of over-counting some events due to hash collisions. The countâ€“min sketch was invented in 2003 by Graham Cormode and S. Muthu Muthukrishnan.\u003c/p\u003e\n\u003ch3 id=\"understanding-count-min-sketch\"\u003eUnderstanding Count-min Sketch\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s say we want to build a solution to count the frequency of elements in a data stream. One idea would be to use a \u003ccode\u003ehashmap\u003c/code\u003e with the data element as the key and count as the value. The approach works but does not scale with a data stream comprising billions of elements, the most unique.\u003c/p\u003e","date":"2023-02-24T00:00:00Z","permalink":"//localhost:1313/en/blog/count_min_sketch/","tags":["Count-min sketch","Probabilistic data structure"],"title":"Count-min sketch"},{"author":"Sarthak Makhija","categories":null,"contents":"","date":"2022-04-28T00:00:00Z","permalink":"//localhost:1313/en/blog/persistent_memory/","tags":["Persistent memory","Storage engine"],"title":"Persistent memory - Introduction"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cp\u003eThe article attempts to explore Golang\u0026rsquo;s \u0026ldquo;C\u0026rdquo; package which allows invoking C code from Golang. Before we get into the idea\nof invoking C code from Golang, let\u0026rsquo;s see a use-case where this might be needed.\u003c/p\u003e\n\u003ch3 id=\"interfacing-with-an-existing-c-library\"\u003eInterfacing with an existing C library\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s consider that we wish to develop a storage engine for pmem (persistent memory) in Golang. In order to develop this, we might want to use\n\u003ca href=\"https://github.com/pmem/pmdk\" target=\"_blank\" rel=\"noopener\"\u003epmdk - persistent memory development kit\u003c/a\u003e\n which is written in C. This effectively means we want a way to bridge Golang and C code; invoke C code\nfrom Golang.\u003c/p\u003e","date":"2021-12-21T00:00:00Z","permalink":"//localhost:1313/en/blog/invoking_c_from_go/","tags":["Golang","C","CGO"],"title":"Invoking C Code from Golang"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cblockquote class=\"wp-block-quote\"\u003e\n    \u003cp\u003eJava code is compiled into an intermediate representation called \"bytecode\". It is this bytecode which gets executed by JVM and is later converted into machine specific instructions by JIT compiler. With this article, we attempt to dive into bytecode and understand the internals of various bytecode operations.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLet\u0026rsquo;s get an understanding of some terms before we start to dive in.\u003c/p\u003e\n\u003ch3 id=\"terminology\"\u003eTerminology\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eBytecode\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eAn intermediate representation of Java code which JVM understands.\u003c/p\u003e","date":"2021-04-04T00:00:00Z","permalink":"//localhost:1313/en/blog/diving_into_java_bytecode/","tags":["Java","JVM","Bytecode"],"title":"Diving into Java Bytecode"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cblockquote\u003e\n\u003cp\u003eAWS Lambda is a serverless compute service and after having worked with it for some time, I felt it is a good time for me to share my learning and experiences. I have been thinking of writing an article in a \u0026ldquo;Virtual Podcast format\u0026rdquo; and felt this could be the one.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWelcome all to this article named \u003cem\u003eAWS Lambda - A Virtual Podcast\u003c/em\u003e and let me introduce our guests Mr. Hernandez and Ms. Jessica who would walk us through their experiences of using AWS Lambda.\u003c/p\u003e","date":"2020-04-19T00:00:00Z","permalink":"//localhost:1313/en/blog/aws_lambda_a_virtual_podcast/","tags":["AWS Lambda","Serverless"],"title":"AWS Lambda - A Virtual Podcast"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cp\u003eWe have come a long way in our \u003ca href=\"/en/blog/beginning_serverless_journey\"\u003eServerless journey\u003c/a\u003e\n. This journey which started with building a serverless application has finally come to a stage where we can see all\nour hard work in action. We will be deploying our application in this article.\u003c/p\u003e\n\u003cp\u003eWe will be using \u003ca href=\"https://docs.aws.amazon.com/cdk/latest/guide/home.html\" target=\"_blank\" rel=\"noopener\"\u003eAWS CDK\u003c/a\u003e\n to deploy our application. Before we start using CDK, let\u0026rsquo;s quickly look at what is CDK -\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe AWS Cloud Development Kit (AWS CDK) is an open source software development framework to model and provision your cloud application resources using familiar programming languages.\nProvisioning cloud applications can be a challenging process that requires you to perform manual actions, write custom scripts, maintain templates, or learn domain-specific languages.\nAWS CDK uses the familiarity and expressive power of programming languages for modeling your applications. It provides you with high-level components that preconfigure cloud resources with\nproven defaults, so you can build cloud applications without needing to be an expert. AWS CDK provisions your resources in a safe, repeatable manner through AWS CloudFormation\u003c/strong\u003e.\nIt also enables you to compose and share your own custom components that incorporate your organization\u0026rsquo;s requirements, helping you start new projects faster.\n\u003ca href=\"https://aws.amazon.com/cdk/\"\u003e\u003ca href=\"https://aws.amazon.com/cdk/\" target=\"_blank\" rel=\"noopener\"\u003ehttps://aws.amazon.com/cdk/\u003c/a\u003e\n\u003c/a\u003e\u003c/p\u003e","date":"2020-03-18T00:00:00Z","permalink":"//localhost:1313/en/blog/concluding_serverless_journey/","tags":["AWS Lambda","Serverless","CDK"],"title":"Concluding Serverless Journey"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cp\u003eIt is time to test our \u003ca href=\"/en/blog/beginning_serverless_journey\"\u003eServerless journey\u003c/a\u003e\n which started with a web application that involved an AWS lambda, an API Gateway and DynamoDB.\u003c/p\u003e\n\u003cp\u003eWe had some unit tests for our controller, service and request objects. But, these tests don\u0026rsquo;t give us the kind of confidence we need to deploy our application. At this stage we don\u0026rsquo;t even know if the query that is written in the repository is going to work properly or not, forget about releasing the application.\u003c/p\u003e","date":"2020-03-14T00:00:00Z","permalink":"//localhost:1313/en/blog/testing_serverless_journey/","tags":["AWS Lambda","Serverless","Localstack"],"title":"Testing Serverless Journey"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cblockquote\u003e\n\u003cp\u003eServerless is a paradigm that lays its foundations on the fact that \u0026ldquo;We don\u0026rsquo;t have to provision and manage servers\u0026rdquo;.\nThis article series explores various aspects involved in a serverless application lifecycle including - development, testing and deployment.\nOur serverless journey which starts from building to deploying an application will be using multiple serverless components including AWS Lambda, AWS API Gateway, AWS DynamoDB, LocalStack and AWS CDK.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLet us deep dive step by step into what it takes to build a Serverless application.\u003c/p\u003e","date":"2020-03-10T00:00:00Z","permalink":"//localhost:1313/en/blog/beginning_serverless_journey/","tags":["AWS Lambda","Serverless"],"title":"Beginning Serverless Journey"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cblockquote\u003e\n\u003cp\u003eWe often have a lot to share with people, this could be our learnings, our opinions and our experiences. There are times when we feel the need to get our ideas validated or get feedback from people. These are definitely some of the reasons to invest in blogging and connect with community.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLet\u0026rsquo;s see some reasons for investing in writing blogs.\n\u003cimg src=\"/invest-in-blogging.jpg\" alt=\"Invest in blogging\" /\u003e\u003c/p\u003e\n\u003ch3 id=\"help-people-learn-from-your-learning-journey\"\u003eHelp people learn from your learning journey\u003c/h3\u003e\n\u003cp\u003eThere are times when we often feel \u0026ldquo;it would have been great if someone had written an article to explain a concept\u0026rdquo;, start writing if you have had this feeling.\u003c/p\u003e","date":"2019-06-07T00:00:00Z","permalink":"//localhost:1313/en/blog/invest_in_blogging/","tags":["Blogging"],"title":"Invest In Blogging"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA domain-specific language (DSL) is a computer language specialized to a particular application domain. This is in contrast to a general-purpose language (GPL), which is broadly applicable across domains. There are a wide variety of DSLs, ranging from widely used languages for common domains, such as HTML for web pages, down to languages used by only one or a few pieces of software.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"kotlin-dsl\"\u003eKotlin DSL\u003c/h3\u003e\n\u003cp\u003eKotlin provides first class support for DSL which allows us to express domain-specific operations much more concisely than an equivalent piece of code in a general-purpose language.\nLet\u0026rsquo;s try and build a simple DSL in Kotlin -\u003c/p\u003e","date":"2018-05-27T00:00:00Z","permalink":"//localhost:1313/en/blog/kotlin_dsl/","tags":["Domain specific language","DSL","Kotlin"],"title":"Kotlin DSL"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cp\u003eThere is no doubt that Java has enjoyed a superior position when it comes to programming languages and is considered as one of the most important languages for development. However, there have been a number of languages developed on top of the JVM, like \u003ca href=\"https://kotlinlang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003eKotlin\u003c/a\u003e\nKotlin is a statically typed programming language for modern multi-platform applications. While I have been a Java developer for quite a long while, working on the \u003ca href=\"https://github.com/dataanon/data-anon\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003edata-anonymization\u003c/a\u003e project made me feel that there are things that Java should consider importing from Kotlin.\nThese are some Kotlin features that I would love to see making a place in Java.\u003c/p\u003e","date":"2018-04-20T00:00:00Z","permalink":"//localhost:1313/en/blog/kotlin_wishlist_for_java/","tags":["Kotlin","Java"],"title":"Kotlin Wishlist for Java"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cp\u003eThis article is in continuation with the \u003ca href=\"/en/blog/lets_define_legacy_code/\"\u003eprevious article\u003c/a\u003e where we defined some key aspects of Legacy code. In this article we will learn to deal with Legacy code.\nBefore we begin with an example, letâ€™s take a moment to understand \u003cem class=\"markup--em markup--p-em\"\u003eBroken Window Theory.\u003c/em\u003e\u003c/p\u003e\u003c/p\u003e\n\u003cimg class=\"align-center\" title=\"Broken Window Theory\" src=\"/broken-window.jpeg\" alt=\"Broken Window Theory\" /\u003e\n\u003ch3 id=\"broken-window-theory\"\u003eBroken Window Theory\u003c/h3\u003e\n\u003cp\u003eAn academic theory proposed by \u003cem\u003eJames Q. Wilson and George Kelling\u003c/em\u003e in 1982 that used broken windows as a metaphor for disorder within neighbourhoods.\u003c/p\u003e","date":"2018-04-12T00:00:00Z","permalink":"//localhost:1313/en/blog/lets_deal_with_legacy_code/","tags":["Legacy code","Broken Window Theory","Refactoring"],"title":"Letâ€™s deal with Legacy code"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cp\u003e\u0026ldquo;I have been having sleepless nights trying to add features in the code that we acquired from other company. I am dealing with the purest form of \u003cem\u003eLegacy code\u003c/em\u003e.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;I am having a real hard time dealing with tangled, unstructured code that I have to work with, but I donâ€™t understand a bit. \u003cem\u003eLegacy code\u003c/em\u003e\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eLegacy code\u003c/em\u003e is a term which probably has a lot of different definitions like: code acquired from someone else, code written by someone else, code that is hard to understand or code written in outdated technologies. Whatever be the definition, most of us believe \u003cem\u003eLegacy code is Scary.\u003c/em\u003e\u003c/p\u003e","date":"2018-04-10T00:00:00Z","permalink":"//localhost:1313/en/blog/lets_define_legacy_code/","tags":["Legacy code","Boy Scout Rule"],"title":"Let's define Legacy code"},{"author":"Sarthak Makhija","categories":null,"contents":"\u003cimg title=\"Flips\" src=\"/flips.jpg\" alt=\"Flips\" /\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Feature-Flip/flips\" target=\"_blank\" rel=\"noopener\"\u003eFlips\u003c/a\u003e\n is an implementation of the Feature Toggles pattern for Java and Spring (Spring Core / Spring MVC/ Spring Boot) based application.\n\u003ca href=\"https://martinfowler.com/articles/feature-toggles.html\" target=\"_blank\" rel=\"noopener\"\u003eFeature Toggle\u003c/a\u003e\n is a powerful technique that allows teams to modify the system behavior and deliver new functionality to end-users rapidly and safely.\u003c/p\u003e\n\u003ch3 id=\"why-another-library-for-feature-toggles\"\u003eWhy Another Library for Feature Toggles?\u003c/h3\u003e\n\u003cp\u003eThe idea behind \u003cstrong\u003eFlips\u003c/strong\u003e is to let the clients implement toggles with \u003cem\u003eminimum configuration and coding\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eThe main motivations behind implementing this library were:\u003c/p\u003e","date":"2017-10-07T00:00:00Z","permalink":"//localhost:1313/en/blog/flips_feature_flipping_for_java/","tags":["Flips","Feature toggles","Spring","Spring MVC"],"title":"Flips: Feature Flipping for Java"}]